const form = document.querySelector('#myForm');
const sendBtn = document.querySelector('.checkin');
const emails = ['ivanov@mail.ru', 'petrov@yandex.ru', 'zuev@inbox.ru'];
const emailError = document.querySelector('.email__error');

form.addEventListener('submit', e => {
  e.preventDefault();

  const password = form.elements.password;
  const email = form.elements.email;
  const agreement = form.elements.agreement;

  if(password.value === '') {
    addFormMessage(password, 'Поле не может быть пустым')
  } else if (password.value.length<4) {
    addFormMessage(password, 'Используйте не менее 4 символов');
  }

  if(email.value === '') {
    addFormMessage(email, 'Поле не может быть пустым')
  } else if(!validateEmail(email.value)) {
    addFormMessage(email, 'Не корректный почтовый адрес')
  } 

  for(var i=0; i<emails.length; i++ ){
    if(email.value === emails[i]) {
      emailError.style.display='flex';
    }
  }
  
  if(!agreement.checked) {
    addFormMessage(agreement, 'Требуется подтверждение')
  }
});

// при фокусе на инпут убираем класс ошибки
[...form.elements].forEach((input) => {
  input.addEventListener('focus', e => {
    let elem = e.currentTarget.parentElement;

    const nowError = elem.querySelector('.form__error_active');

    if(nowError) {
     nowError.classList.remove('form__error_active');
    }

    elem.classList.remove('form__row_error');
  });

  // если checkbox в состоянии checked убираем класс ошибки
  agreement.addEventListener('change', e => {
    let elem = e.currentTarget.parentElement;

    const nowError = elem.querySelector('.form__error_active');

    if(nowError) {
     nowError.classList.remove('form__error_active');
    }
    elem.classList.remove('form__row_error');
  });

  // при фокусе на инпут убираем класс ошибки о существовании email
  email.addEventListener('focus', e => {

    if(emailError) {
      emailError.style.display='none';
    }
  });
});

// добавляем блок-сообщение об ошибке
function addFormMessage(elem, message) {
  let parrent = elem.parentElement;
  const curError = parrent.querySelector('.form__error');

  curError.classList.add('form__error_active');
  curError.innerHTML = message;

  parrent.classList.add('form__row_error');
}

// валидация email
function validateEmail(email) {
  var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm0uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXlGb3JtJyk7XHJcbmNvbnN0IHNlbmRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2hlY2tpbicpO1xyXG5jb25zdCBlbWFpbHMgPSBbJ2l2YW5vdkBtYWlsLnJ1JywgJ3BldHJvdkB5YW5kZXgucnUnLCAnenVldkBpbmJveC5ydSddO1xyXG5jb25zdCBlbWFpbEVycm9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVtYWlsX19lcnJvcicpO1xyXG5cclxuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBlID0+IHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGNvbnN0IHBhc3N3b3JkID0gZm9ybS5lbGVtZW50cy5wYXNzd29yZDtcclxuICBjb25zdCBlbWFpbCA9IGZvcm0uZWxlbWVudHMuZW1haWw7XHJcbiAgY29uc3QgYWdyZWVtZW50ID0gZm9ybS5lbGVtZW50cy5hZ3JlZW1lbnQ7XHJcblxyXG4gIGlmKHBhc3N3b3JkLnZhbHVlID09PSAnJykge1xyXG4gICAgYWRkRm9ybU1lc3NhZ2UocGFzc3dvcmQsICfQn9C+0LvQtSDQvdC1INC80L7QttC10YIg0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8JylcclxuICB9IGVsc2UgaWYgKHBhc3N3b3JkLnZhbHVlLmxlbmd0aDw0KSB7XHJcbiAgICBhZGRGb3JtTWVzc2FnZShwYXNzd29yZCwgJ9CY0YHQv9C+0LvRjNC30YPQudGC0LUg0L3QtSDQvNC10L3QtdC1IDQg0YHQuNC80LLQvtC70L7QsicpO1xyXG4gIH1cclxuXHJcbiAgaWYoZW1haWwudmFsdWUgPT09ICcnKSB7XHJcbiAgICBhZGRGb3JtTWVzc2FnZShlbWFpbCwgJ9Cf0L7Qu9C1INC90LUg0LzQvtC20LXRgiDQsdGL0YLRjCDQv9GD0YHRgtGL0LwnKVxyXG4gIH0gZWxzZSBpZighdmFsaWRhdGVFbWFpbChlbWFpbC52YWx1ZSkpIHtcclxuICAgIGFkZEZvcm1NZXNzYWdlKGVtYWlsLCAn0J3QtSDQutC+0YDRgNC10LrRgtC90YvQuSDQv9C+0YfRgtC+0LLRi9C5INCw0LTRgNC10YEnKVxyXG4gIH0gXHJcblxyXG4gIGZvcih2YXIgaT0wOyBpPGVtYWlscy5sZW5ndGg7IGkrKyApe1xyXG4gICAgaWYoZW1haWwudmFsdWUgPT09IGVtYWlsc1tpXSkge1xyXG4gICAgICBlbWFpbEVycm9yLnN0eWxlLmRpc3BsYXk9J2ZsZXgnO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBpZighYWdyZWVtZW50LmNoZWNrZWQpIHtcclxuICAgIGFkZEZvcm1NZXNzYWdlKGFncmVlbWVudCwgJ9Ci0YDQtdCx0YPQtdGC0YHRjyDQv9C+0LTRgtCy0LXRgNC20LTQtdC90LjQtScpXHJcbiAgfVxyXG59KTtcclxuXHJcbi8vINC/0YDQuCDRhNC+0LrRg9GB0LUg0L3QsCDQuNC90L/Rg9GCINGD0LHQuNGA0LDQtdC8INC60LvQsNGB0YEg0L7RiNC40LHQutC4XHJcblsuLi5mb3JtLmVsZW1lbnRzXS5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZSA9PiB7XHJcbiAgICBsZXQgZWxlbSA9IGUuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0IG5vd0Vycm9yID0gZWxlbS5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fZXJyb3JfYWN0aXZlJyk7XHJcblxyXG4gICAgaWYobm93RXJyb3IpIHtcclxuICAgICBub3dFcnJvci5jbGFzc0xpc3QucmVtb3ZlKCdmb3JtX19lcnJvcl9hY3RpdmUnKTtcclxuICAgIH1cclxuXHJcbiAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2Zvcm1fX3Jvd19lcnJvcicpO1xyXG4gIH0pO1xyXG5cclxuICAvLyDQtdGB0LvQuCBjaGVja2JveCDQsiDRgdC+0YHRgtC+0Y/QvdC40LggY2hlY2tlZCDRg9Cx0LjRgNCw0LXQvCDQutC70LDRgdGBINC+0YjQuNCx0LrQuFxyXG4gIGFncmVlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBlID0+IHtcclxuICAgIGxldCBlbGVtID0gZS5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQ7XHJcblxyXG4gICAgY29uc3Qgbm93RXJyb3IgPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtX19lcnJvcl9hY3RpdmUnKTtcclxuXHJcbiAgICBpZihub3dFcnJvcikge1xyXG4gICAgIG5vd0Vycm9yLmNsYXNzTGlzdC5yZW1vdmUoJ2Zvcm1fX2Vycm9yX2FjdGl2ZScpO1xyXG4gICAgfVxyXG4gICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdmb3JtX19yb3dfZXJyb3InKTtcclxuICB9KTtcclxuXHJcbiAgLy8g0L/RgNC4INGE0L7QutGD0YHQtSDQvdCwINC40L3Qv9GD0YIg0YPQsdC40YDQsNC10Lwg0LrQu9Cw0YHRgSDQvtGI0LjQsdC60Lgg0L4g0YHRg9GJ0LXRgdGC0LLQvtCy0LDQvdC40LggZW1haWxcclxuICBlbWFpbC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGUgPT4ge1xyXG5cclxuICAgIGlmKGVtYWlsRXJyb3IpIHtcclxuICAgICAgZW1haWxFcnJvci5zdHlsZS5kaXNwbGF5PSdub25lJztcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcblxyXG4vLyDQtNC+0LHQsNCy0LvRj9C10Lwg0LHQu9C+0Lot0YHQvtC+0LHRidC10L3QuNC1INC+0LEg0L7RiNC40LHQutC1XHJcbmZ1bmN0aW9uIGFkZEZvcm1NZXNzYWdlKGVsZW0sIG1lc3NhZ2UpIHtcclxuICBsZXQgcGFycmVudCA9IGVsZW0ucGFyZW50RWxlbWVudDtcclxuICBjb25zdCBjdXJFcnJvciA9IHBhcnJlbnQucXVlcnlTZWxlY3RvcignLmZvcm1fX2Vycm9yJyk7XHJcblxyXG4gIGN1ckVycm9yLmNsYXNzTGlzdC5hZGQoJ2Zvcm1fX2Vycm9yX2FjdGl2ZScpO1xyXG4gIGN1ckVycm9yLmlubmVySFRNTCA9IG1lc3NhZ2U7XHJcblxyXG4gIHBhcnJlbnQuY2xhc3NMaXN0LmFkZCgnZm9ybV9fcm93X2Vycm9yJyk7XHJcbn1cclxuXHJcbi8vINCy0LDQu9C40LTQsNGG0LjRjyBlbWFpbFxyXG5mdW5jdGlvbiB2YWxpZGF0ZUVtYWlsKGVtYWlsKSB7XHJcbiAgdmFyIHJlID0gL14oKFtePD4oKVtcXF1cXFxcLiw7Olxcc0BcXFwiXSsoXFwuW148PigpW1xcXVxcXFwuLDs6XFxzQFxcXCJdKykqKXwoXFxcIi4rXFxcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcXSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XHJcbiAgcmV0dXJuIHJlLnRlc3QoZW1haWwpO1xyXG59Il19
